#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import os
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_connection():
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    database_url = os.getenv('DATABASE_URL')
    print(f"DATABASE_URL: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω ‚úÖ' if database_url else '–ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚ùå'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç asyncpg
    try:
        import asyncpg
        print("asyncpg: –î–æ—Å—Ç—É–ø–µ–Ω ‚úÖ")
        postgres_available = True
    except ImportError:
        print("asyncpg: –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω ‚ùå")
        postgres_available = False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ Database –æ–±—ä–µ–∫—Ç–∞
    from database.database import Database
    db = Database()
    
    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–∞: {'PostgreSQL ‚úÖ' if db.use_postgres else 'SQLite ‚ùå'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
    if db.use_postgres and postgres_available and database_url:
        try:
            import asyncpg
            conn = await asyncpg.connect(database_url)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL
            result = await conn.fetchval("SELECT COUNT(*) FROM users")
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ PostgreSQL: {result}")
            
            users = await conn.fetch("SELECT telegram_id, credits FROM users")
            for user in users:
                print(f"  - User {user['telegram_id']}: {user['credits']} credits")
            
            await conn.close()
            print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: –†–ê–ë–û–¢–ê–ï–¢ ‚úÖ")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e} ‚ùå")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQLite
    import aiosqlite
    sqlite_path = "bot_database.db"
    
    if os.path.exists(sqlite_path):
        print(f"SQLite —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {sqlite_path}")
        
        try:
            async with aiosqlite.connect(sqlite_path) as sqlite_db:
                cursor = await sqlite_db.execute("SELECT COUNT(*) FROM users")
                result = await cursor.fetchone()
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ SQLite: {result[0] if result else 0}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è SQLite: {e}")
    else:
        print("SQLite —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    print("=" * 50)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
    
    if db.use_postgres:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ PostgreSQL")
        print("üì± –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ deployed –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    else:
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SQLite –≤–º–µ—Å—Ç–æ PostgreSQL") 
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DATABASE_URL –≤ deployed —Å—Ä–µ–¥–µ")

if __name__ == "__main__":
    asyncio.run(test_connection())