#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–¥–∞—á–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø—Ä–∏ deploy
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import asyncio
import sys
from typing import List, Dict, Any
from credit_management import check_user_credits, grant_user_credits, emergency_credit_restore
from database.database import db, init_database
from config import Config

config = Config()

class DeployCreditTools:
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏ –ø—Ä–∏ deploy"""
    
    def __init__(self):
        self.admin_id = config.ADMIN_USER_ID
        
    async def batch_check_credits(self, user_ids: List[int]) -> Dict[int, Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        results = {}
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        for user_id in user_ids:
            try:
                result = await check_user_credits(self.admin_id, user_id)
                results[user_id] = result
                
                if "error" not in result:
                    print(f"üë§ {user_id}: {result['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤")
                else:
                    print(f"‚ùå {user_id}: {result['error']}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {user_id}: {e}")
                results[user_id] = {"error": str(e)}
        
        return results
    
    async def batch_grant_credits(self, credit_assignments: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        –ú–∞—Å—Å–æ–≤–∞—è –≤—ã–¥–∞—á–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
        
        Args:
            credit_assignments: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏:
                - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                - credits: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
                - reason: –ø—Ä–∏—á–∏–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                - payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        results = {
            "success": [],
            "failed": [],
            "total_credits_granted": 0
        }
        
        print(f"üí∞ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –≤—ã–¥–∞—á—É –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è {len(credit_assignments)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        for assignment in credit_assignments:
            user_id = assignment.get("user_id")
            credits = assignment.get("credits")
            reason = assignment.get("reason", "–ú–∞—Å—Å–æ–≤–∞—è –≤—ã–¥–∞—á–∞ –ø—Ä–∏ deploy")
            payment_id = assignment.get("payment_id", "")
            
            if not user_id or not credits:
                print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {assignment}")
                results["failed"].append({
                    "assignment": assignment,
                    "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id –∏–ª–∏ credits"
                })
                continue
            
            try:
                if payment_id:
                    result = await emergency_credit_restore(self.admin_id, user_id, credits, payment_id)
                else:
                    result = await grant_user_credits(self.admin_id, user_id, credits, reason)
                
                if result.get("success"):
                    print(f"‚úÖ {user_id}: +{credits} –∫—Ä–µ–¥–∏—Ç–æ–≤")
                    results["success"].append(result)
                    results["total_credits_granted"] += credits
                else:
                    print(f"‚ùå {user_id}: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    results["failed"].append({
                        "user_id": user_id,
                        "credits": credits,
                        "error": result.get("error")
                    })
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ {user_id}: {e}")
                results["failed"].append({
                    "user_id": user_id,
                    "credits": credits,
                    "error": str(e)
                })
        
        print(f"\nüìä –ò—Ç–æ–≥–∏ –º–∞—Å—Å–æ–≤–æ–π –≤—ã–¥–∞—á–∏:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(results['success'])}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(results['failed'])}")
        print(f"üí∞ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {results['total_credits_granted']}")
        
        return results
    
    async def restore_lost_payment(self, user_id: int, credits: int, payment_id: str) -> Dict[str, Any]:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        print(f"üö® –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂...")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        print(f"üí∞ –ö—Ä–µ–¥–∏—Ç—ã: {credits}")
        print(f"üí≥ –ü–ª–∞—Ç–µ–∂: {payment_id}")
        
        result = await emergency_credit_restore(self.admin_id, user_id, credits, payment_id)
        
        if result.get("success"):
            print(f"‚úÖ –£–°–ü–ï–®–ù–û! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {result.get('error')}")
        
        return result

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("üöÄ Deploy Credit Tools")
    print("=" * 40)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_database()
    
    tools = DeployCreditTools()
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python deploy_credit_tools.py check <user_id>")
        print("  python deploy_credit_tools.py grant <user_id> <credits> [reason]")
        print("  python deploy_credit_tools.py restore <user_id> <credits> <payment_id>")
        return
    
    command = sys.argv[1].lower()
    
    if command == "check" and len(sys.argv) >= 3:
        user_id = int(sys.argv[2])
        result = await check_user_credits(config.ADMIN_USER_ID, user_id)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
    elif command == "grant" and len(sys.argv) >= 4:
        user_id = int(sys.argv[2])
        credits = int(sys.argv[3])
        reason = sys.argv[4] if len(sys.argv) > 4 else "Deploy credit grant"
        
        result = await grant_user_credits(config.ADMIN_USER_ID, user_id, credits, reason)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
    elif command == "restore" and len(sys.argv) >= 5:
        user_id = int(sys.argv[2])
        credits = int(sys.argv[3])
        payment_id = sys.argv[4]
        
        result = await tools.restore_lost_payment(user_id, credits, payment_id)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")

if __name__ == "__main__":
    asyncio.run(main())