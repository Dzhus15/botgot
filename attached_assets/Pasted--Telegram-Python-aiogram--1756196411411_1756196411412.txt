Разработайте Telegram-бота на Python (используя библиотеку aiogram для асинхронной обработки), который генерирует видео с помощью API Veo (от Google) через платформу kie.ai. Документация по настройке Veo API предоставлена в прикрепленном PDF-файле. Изучите документацию из файла для корректной интеграции API.
Основные функции бота:
Команда /start: Отправляет приветственное сообщение с inline-кнопками для выбора: "Генерировать видео", "Купить кредиты", "Помощь".
"Генерировать видео": Подменю с кнопками "Видео из текста" и "Видео из изображения". После выбора бот отправляет сообщение с рекомендациями по составлению промптов (включая текст из раздела "Помощь" ниже) и ждет ввода промпта от пользователя. Затем генерирует видео через Veo API, тратит кредиты пользователя (если недостаточно — уведомляет) и отправляет результат.
"Купить кредиты": Подменю с кнопками "Оплатить картой или СБП" (Система быстрых платежей) и "Оплатить Telegram Stars". Реализуйте интеграцию с платежными API (используйте Telegram Payments для Stars и внешний провайдер для карт/СБП через юкасса,позже скину документацию). После оплаты обновляйте баланс кредитов в БД.
"Помощь": Отправляет текстовое сообщение со следующими ссылками и текстом:
"Важные советы по составлению запросов: https://t.me/CatiAiPromt/51.
Примеры хороших запросов можно найти здесь: https://t.me/CatiAiPromt."
Структура кода и репозитория:
Организуйте код модульно для удобного развития: отдельные файлы/модули для handlers (обработчики команд), database (работа с БД), api_integrations (Veo API и платежи), utils (вспомогательные функции). Используйте Git для репозитория на Replit, с ветками для обновлений.
Обеспечьте безопасность:
Храните API-ключи (Veo, Telegram, платежи) в переменных окружения Replit (secrets).
Защищайте от SQL-инъекций (используйте parameterized queries).
Добавьте rate-limiting для предотвращения спама (например, через middleware в aiogram).
Логируйте ошибки без раскрытия чувствительных данных.
Оптимизация и масштабируемость:
Используйте асинхронный код (asyncio) для обработки одновременных запросов.
Кэшируйте частые запросы (если применимо).
Мониторьте нагрузку; если пользователей много, бот должен gracefully обрабатывать очереди 
База данных:
Изучите документацию Replit по базам данных (https://docs.replit.com/programming-ide/workspace-features/replit-database или аналогичные разделы). Настройте persistent базу данных, чтобы данные не терялись при redeploy: используйте Replit DB (ключ-значение) или SQLite с хранением файла в проекте (commit в Git для бэкапа). Автоматически бэкапьте данные при обновлениях.
Храните в БД:
Пользователи: Telegram ID, баланс кредитов, статус (админ/обычный), история оплат и генераций.
Система кредитов: Фиксируйте каждую транзакцию (покупка, трата) с timestamp для аудита.
Контроль пользователей: Логи активности для предотвращения злоупотреблений.
По умолчанию: Для пользователя с Telegram ID 1864913930 выдайте 100 кредитов и права администратора при первой регистрации.
Администраторские функции:
Команда /admin (доступна только админам): Отправляет inline-меню с минимальными опциями, чтобы не перегружать БД и бота:
"Статистика пользователей": Отображает удобный интерфейс (текст + кнопки для навигации) с данными: общее количество пользователей, активные, балансы (агрегированные, без полного дампа БД).
"Рассылка сообщений": Позволяет админу ввести текст + прикрепить фото, или переслать пост из другого чата — бот разошлет это всем пользователям (асинхронно, с паузами для избежания банов Telegram).
Реализуйте бота полностью, сгенерируйте код и инструкции по развертыванию на Replit. Убедитесь, что бот устойчив к ошибкам и предоставляет user-friendly сообщения.