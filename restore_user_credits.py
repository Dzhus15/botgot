#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
"""
import asyncio
import sys
from database.database import db
from database.models import Transaction, TransactionType, PaymentMethod, AdminLog

async def restore_credits(telegram_id: int, credits: int, comment: str):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    print(f"üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(telegram_id)
    if not user:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    old_credits = user.credits
    new_credits = old_credits + credits
    
    # –û–±–Ω–æ–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã
    success = await db.update_user_credits(telegram_id, new_credits)
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤!")
        return False
    
    # –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    transaction = Transaction(
        user_id=telegram_id,
        type=TransactionType.ADMIN_GRANT,
        amount=credits,
        description=f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {comment}",
        payment_method=PaymentMethod.ADMIN_GRANT
    )
    await db.create_transaction(transaction)
    
    # –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω –ª–æ–≥
    admin_log = AdminLog(
        admin_id=1864913930,  # ID –∞–¥–º–∏–Ω–∞
        action="credit_recovery",
        target_user_id=telegram_id,
        description=f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤: {comment}"
    )
    await db.create_admin_log(admin_log)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ!")
    print(f"   –ë—ã–ª–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {old_credits}")
    print(f"   –î–æ–±–∞–≤–ª–µ–Ω–æ: {credits}")
    print(f"   –°—Ç–∞–ª–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {new_credits}")
    return True

async def show_users():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    print("-" * 60)
    
    if db.use_postgres:
        conn = await db.get_postgres_connection()
        try:
            rows = await conn.fetch("""
                SELECT telegram_id, username, first_name, credits, created_at 
                FROM users 
                ORDER BY created_at
            """)
            for row in rows:
                username = row[1] or "–Ω–µ—Ç"
                first_name = row[2] or "–Ω–µ—Ç"
                created = row[4].strftime("%d.%m.%Y %H:%M")
                print(f"ID: {row[0]:<12} | @{username:<15} | {first_name:<15} | {row[3]:>3} –∫—Ä–µ–¥–∏—Ç–æ–≤ | {created}")
        finally:
            await conn.close()

if __name__ == "__main__":
    if len(sys.argv) == 1:
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        asyncio.run(show_users())
        print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(f"  python {sys.argv[0]} telegram_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫—Ä–µ–¥–∏—Ç–æ–≤ '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'")
        print(f"  python {sys.argv[0]} 123456789 50 '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ redeploy'")
    elif len(sys.argv) == 4:
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã
        telegram_id = int(sys.argv[1])
        credits = int(sys.argv[2])
        comment = sys.argv[3]
        asyncio.run(restore_credits(telegram_id, credits, comment))
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(f"  python {sys.argv[0]} telegram_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫—Ä–µ–¥–∏—Ç–æ–≤ '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'")