from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import uuid

from database.database import db
from database.models import VideoGeneration, Transaction, TransactionType, GenerationType
from api_integrations.veo_api import VeoAPI
from keyboards.inline import get_generation_menu_keyboard, get_back_to_menu_keyboard
from config import Config
from utils.logger import get_logger

logger = get_logger(__name__)
router = Router()
config = Config()

class GenerationStates(StatesGroup):
    waiting_text_prompt = State()
    waiting_image_prompt = State()
    waiting_image = State()

@router.callback_query(F.data == "generate_video")
async def generate_video_menu(callback: CallbackQuery):
    """Show video generation menu"""
    text = """
üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:

üìù –í–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ - —Å–æ–∑–¥–∞–π—Ç–µ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
üñº –í–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –æ–∂–∏–≤–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ò–ò

üí° –°—Ç–æ–∏–º–æ—Å—Ç—å: 10 –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ –≤–∏–¥–µ–æ (79‚ÇΩ)
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_generation_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "text_to_video")
async def text_to_video_start(callback: CallbackQuery, state: FSMContext):
    """Start text-to-video generation"""
    user = await db.get_user(callback.from_user.id)
    if not user or user.credits < config.VIDEO_GENERATION_COST:
        await callback.message.edit_text(
            f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤!</b>\n\n"
            f"–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –Ω—É–∂–Ω–æ {config.VIDEO_GENERATION_COST} –∫—Ä–µ–¥–∏—Ç–æ–≤.\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.credits if user else 0} –∫—Ä–µ–¥–∏—Ç–æ–≤",
            reply_markup=get_back_to_menu_keyboard()
        )
        await callback.answer()
        return
    
    prompt_tips = """
üé¨ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞</b>

üìù –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.

üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</b>
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è, –¥–≤–∏–∂–µ–Ω–∏—è, —Å—Ü–µ–Ω—ã
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å—Ç–∏–ª—å, –æ—Å–≤–µ—â–µ–Ω–∏–µ, —Ä–∞–∫—É—Ä—Å –∫–∞–º–µ—Ä—ã
‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

<b>–ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:</b>
"–ö—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω –∑–æ–ª–æ—Ç–∏—Å—Ç–æ–≥–æ —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞, –∏–≥—Ä–∞—é—â–µ–≥–æ —Å –º—è—á–æ–º –≤ —Å–æ–ª–Ω–µ—á–Ω–æ–º –ø–∞—Ä–∫–µ. –°–æ–±–∞–∫–∞ —Ä–∞–¥–æ—Å—Ç–Ω–æ –ø–æ–¥–ø—Ä—ã–≥–∏–≤–∞–µ—Ç, –ª–æ–≤—è –º—è—á. –ú—è–≥–∫–æ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å—ä–µ–º–∫–∞"

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø—Ä–æ–º–ø—Ç:
    """
    
    await callback.message.edit_text(
        prompt_tips,
        reply_markup=get_back_to_menu_keyboard()
    )
    await state.set_state(GenerationStates.waiting_text_prompt)
    await callback.answer()

@router.callback_query(F.data == "image_to_video")
async def image_to_video_start(callback: CallbackQuery, state: FSMContext):
    """Start image-to-video generation"""
    user = await db.get_user(callback.from_user.id)
    if not user or user.credits < config.VIDEO_GENERATION_COST:
        await callback.message.edit_text(
            f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤!</b>\n\n"
            f"–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –Ω—É–∂–Ω–æ {config.VIDEO_GENERATION_COST} –∫—Ä–µ–¥–∏—Ç–æ–≤.\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.credits if user else 0} –∫—Ä–µ–¥–∏—Ç–æ–≤",
            reply_markup=get_back_to_menu_keyboard()
        )
        await callback.answer()
        return
    
    image_instructions = """
üñº <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>

üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–∂–∏–≤–∏—Ç—å.

üìù –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –æ–∂–∏—Ç—å:

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ, –∫–∞–∫–∏–µ —á–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –¥–≤–∏–≥–∞—Ç—å—Å—è
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:
    """
    
    await callback.message.edit_text(
        image_instructions,
        reply_markup=get_back_to_menu_keyboard()
    )
    await state.set_state(GenerationStates.waiting_image)
    await callback.answer()

@router.message(GenerationStates.waiting_text_prompt)
async def process_text_prompt(message: Message, state: FSMContext):
    """Process text-to-video prompt"""
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ.")
        return
    
    await state.clear()
    
    # Check user credits again
    user = await db.get_user(message.from_user.id)
    if not user or user.credits < config.VIDEO_GENERATION_COST:
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤! –ù—É–∂–Ω–æ {config.VIDEO_GENERATION_COST} –∫—Ä–µ–¥–∏—Ç–æ–≤.",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    # Generate unique task ID
    task_id = f"veo_{uuid.uuid4().hex[:12]}"
    
    # Deduct credits
    new_credits = user.credits - config.VIDEO_GENERATION_COST
    await db.update_user_credits(message.from_user.id, new_credits)
    
    # Create transaction record
    transaction = Transaction(
        user_id=message.from_user.id,
        type=TransactionType.CREDIT_SPEND,
        amount=-config.VIDEO_GENERATION_COST,
        description=f"Video generation: {message.text[:50]}..."
    )
    await db.create_transaction(transaction)
    
    # Create video generation record
    generation = VideoGeneration(
        user_id=message.from_user.id,
        task_id=task_id,
        prompt=message.text,
        generation_type=GenerationType.TEXT_TO_VIDEO,
        model=config.DEFAULT_MODEL,
        aspect_ratio=config.DEFAULT_ASPECT_RATIO,
        credits_spent=config.VIDEO_GENERATION_COST
    )
    await db.create_video_generation(generation)
    
    # Start video generation
    processing_msg = await message.answer(
        f"üé¨ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—à–µ –≤–∏–¥–µ–æ...</b>\n\n"
        f"üìù –ü—Ä–æ–º–ø—Ç: {message.text[:100]}{'...' if len(message.text) > 100 else ''}\n"
        f"üí∞ –°–ø–∏—Å–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {config.VIDEO_GENERATION_COST}\n"
        f"üí≥ –û—Å—Ç–∞—Ç–æ–∫: {new_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
        f"‚è≥ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 1-5 –º–∏–Ω—É—Ç. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏!",
        reply_markup=get_back_to_menu_keyboard()
    )
    
    # Call Veo API
    veo_api = VeoAPI()
    success = await veo_api.generate_video(
        task_id=task_id,
        prompt=message.text,
        generation_type=GenerationType.TEXT_TO_VIDEO,
        user_id=message.from_user.id
    )
    
    if not success:
        # Refund credits on failure
        await db.update_user_credits(message.from_user.id, user.credits)
        refund_transaction = Transaction(
            user_id=message.from_user.id,
            type=TransactionType.ADMIN_GRANT,
            amount=config.VIDEO_GENERATION_COST,
            description="Refund for failed generation"
        )
        await db.create_transaction(refund_transaction)
        
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ</b>\n\n"
            "–ö—Ä–µ–¥–∏—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard()
        )

@router.message(GenerationStates.waiting_image)
async def process_image_upload(message: Message, state: FSMContext):
    """Process image for image-to-video generation"""
    logger.info(f"Processing image upload from user {message.from_user.id}")
    
    if not message.photo:
        logger.warning(f"No photo in message from user {message.from_user.id}")
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return
    
    # Get the largest photo size
    photo = message.photo[-1]
    
    # Store image file_id in state
    await state.update_data(image_file_id=photo.file_id)
    
    await message.answer(
        "üìù <b>–û—Ç–ª–∏—á–Ω–æ! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ–∂–∏—Ç—å:\n"
        "‚Ä¢ –ö–∞–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å?\n"
        "‚Ä¢ –ö–∞–∫–∏–µ —á–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –¥–≤–∏–≥–∞—Ç—å—Å—è?\n"
        "‚Ä¢ –ö–∞–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å?\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        reply_markup=get_back_to_menu_keyboard()
    )
    await state.set_state(GenerationStates.waiting_image_prompt)

@router.message(GenerationStates.waiting_image_prompt)
async def process_image_prompt(message: Message, state: FSMContext):
    """Process prompt for image-to-video generation"""
    logger.info(f"Processing image prompt from user {message.from_user.id}: {message.text[:50] if message.text else 'No text'}")
    
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
        return
    
    state_data = await state.get_data()
    image_file_id = state_data.get('image_file_id')
    
    if not image_file_id:
        await message.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return
    
    await state.clear()
    
    # Check user credits
    user = await db.get_user(message.from_user.id)
    if not user or user.credits < config.VIDEO_GENERATION_COST:
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤! –ù—É–∂–Ω–æ {config.VIDEO_GENERATION_COST} –∫—Ä–µ–¥–∏—Ç–æ–≤.",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    # Generate unique task ID
    task_id = f"veo_{uuid.uuid4().hex[:12]}"
    
    # Deduct credits
    new_credits = user.credits - config.VIDEO_GENERATION_COST
    await db.update_user_credits(message.from_user.id, new_credits)
    
    # Create transaction record
    transaction = Transaction(
        user_id=message.from_user.id,
        type=TransactionType.CREDIT_SPEND,
        amount=-config.VIDEO_GENERATION_COST,
        description=f"Image-to-video generation: {message.text[:50]}..."
    )
    await db.create_transaction(transaction)
    
    # For image-to-video, we need to get the actual image URL
    # In a real implementation, you would upload the image to a public URL
    # For now, we'll use the file_id (this needs to be converted to a public URL)
    image_url = f"telegram_file:{image_file_id}"  # Placeholder
    
    # Create video generation record
    generation = VideoGeneration(
        user_id=message.from_user.id,
        task_id=task_id,
        prompt=message.text,
        generation_type=GenerationType.IMAGE_TO_VIDEO,
        image_url=image_url,
        model=config.DEFAULT_MODEL,
        aspect_ratio=config.DEFAULT_ASPECT_RATIO,
        credits_spent=config.VIDEO_GENERATION_COST
    )
    await db.create_video_generation(generation)
    
    await message.answer(
        f"üñº <b>–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...</b>\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {message.text[:100]}{'...' if len(message.text) > 100 else ''}\n"
        f"üí∞ –°–ø–∏—Å–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {config.VIDEO_GENERATION_COST}\n"
        f"üí≥ –û—Å—Ç–∞—Ç–æ–∫: {new_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
        f"‚è≥ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 1-5 –º–∏–Ω—É—Ç. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏!",
        reply_markup=get_back_to_menu_keyboard()
    )
    
    # Call Veo API for image-to-video
    veo_api = VeoAPI()
    success = await veo_api.generate_video(
        task_id=task_id,
        prompt=message.text,
        generation_type=GenerationType.IMAGE_TO_VIDEO,
        image_file_id=image_file_id,
        user_id=message.from_user.id
    )
    
    if not success:
        # Refund credits on failure
        await db.update_user_credits(message.from_user.id, user.credits)
        refund_transaction = Transaction(
            user_id=message.from_user.id,
            type=TransactionType.ADMIN_GRANT,
            amount=config.VIDEO_GENERATION_COST,
            description="Refund for failed generation"
        )
        await db.create_transaction(refund_transaction)
        
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ</b>\n\n"
            "–ö—Ä–µ–¥–∏—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard()
        )
