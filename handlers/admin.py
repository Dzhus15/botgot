from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio

from database.database import db
from database.models import AdminLog, UserStatus
from keyboards.inline import get_admin_menu_keyboard, get_back_to_admin_keyboard
from config import Config
from utils.logger import get_logger
from admin_tools.credit_management import check_user_credits, grant_user_credits, emergency_credit_restore

logger = get_logger(__name__)
router = Router()
config = Config()

class AdminStates(StatesGroup):
    waiting_broadcast_message = State()
    waiting_payment_id = State()
    waiting_user_id_for_notification = State()
    waiting_user_id_for_credits = State()
    waiting_credits_amount = State()
    waiting_credits_reason = State()

async def is_admin(user_id: int) -> bool:
    """Check if user is admin"""
    user = await db.get_user(user_id)
    return user and user.status == UserStatus.ADMIN

@router.message(Command("admin"))
async def admin_command(message: Message, state: FSMContext):
    """Handle /admin command"""
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await state.clear()
    
    admin_text = """
üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
üí∞ <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã</b> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
üíé <b>–í—ã–¥–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã</b> - –Ω–∞—á–∏—Å–ª–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –Ω–∞ production)
üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b> - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞</b> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    """
    
    await message.answer(
        admin_text,
        reply_markup=get_admin_menu_keyboard()
    )

@router.callback_query(F.data == "admin_stats")
async def admin_statistics(callback: CallbackQuery):
    """Show admin statistics"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        stats = await db.get_user_statistics()
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

üë• <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats['total_users']}
üî• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (30 –¥–Ω–µ–π):</b> {stats['active_users']}
üí∞ <b>–í—Å–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:</b> {stats['total_credits']:,}
üé¨ <b>–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ:</b> {stats['total_videos']}

üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {(stats['active_users'] / max(stats['total_users'], 1) * 100):.1f}%
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {(stats['total_credits'] / max(stats['total_users'], 1)):.1f}
        """
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_back_to_admin_keyboard()
        )
        
        # Log admin action
        admin_log = AdminLog(
            admin_id=callback.from_user.id,
            action="view_statistics",
            description="Viewed user statistics"
        )
        await db.log_admin_action(admin_log)
        
    except Exception as e:
        logger.error(f"Error getting admin statistics: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=get_back_to_admin_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_start(callback: CallbackQuery, state: FSMContext):
    """Start broadcast message creation"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    broadcast_text = """
üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

üí° <b>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b>
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
‚Ä¢ –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –í–°–ï–ú –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞!

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:
    """
    
    await callback.message.edit_text(
        broadcast_text,
        reply_markup=get_back_to_admin_keyboard()
    )
    await state.set_state(AdminStates.waiting_broadcast_message)
    await callback.answer()

@router.message(AdminStates.waiting_broadcast_message)
async def admin_broadcast_process(message: Message, state: FSMContext):
    """Process broadcast message"""
    if not await is_admin(message.from_user.id):
        return
    
    await state.clear()
    
    # Get all user IDs
    user_ids = await db.get_all_user_ids()
    total_users = len(user_ids)
    
    if total_users == 0:
        await message.answer(
            "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
            reply_markup=get_back_to_admin_keyboard()
        )
        return
    
    # Confirm broadcast
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="confirm_broadcast"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_menu")
        ]
    ])
    
    await message.answer(
        f"üì¢ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"üìù <b>–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {'–° —Ñ–æ—Ç–æ' if message.photo else '–¢–µ–∫—Å—Ç–æ–≤–æ–µ'}\n\n"
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
        reply_markup=confirm_keyboard
    )
    
    # Store message for broadcast
    await state.update_data(
        broadcast_message_id=message.message_id,
        total_users=total_users
    )

@router.callback_query(F.data == "confirm_broadcast")
async def admin_broadcast_confirm(callback: CallbackQuery, state: FSMContext):
    """Confirm and execute broadcast"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    state_data = await state.get_data()
    broadcast_message_id = state_data.get('broadcast_message_id')
    total_users = state_data.get('total_users', 0)
    
    if not broadcast_message_id:
        await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    await state.clear()
    
    # Start broadcast
    progress_msg = await callback.message.edit_text(
        f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n"
        f"‚ùå –û—à–∏–±–æ–∫: 0\n\n"
        f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è..."
    )
    
    # Get user IDs and start broadcast
    user_ids = await db.get_all_user_ids()
    success_count = 0
    error_count = 0
    
    # Import bot instance
    from aiogram import Bot
    from config import Config
    bot_config = Config()
    bot = Bot(token=bot_config.TELEGRAM_BOT_TOKEN)
    
    for i, user_id in enumerate(user_ids):
        try:
            # Forward the broadcast message
            await bot.forward_message(
                chat_id=user_id,
                from_chat_id=callback.from_user.id,
                message_id=broadcast_message_id
            )
            success_count += 1
            
            # Update progress every 10 users
            if (i + 1) % 10 == 0 or i == len(user_ids) - 1:
                try:
                    await progress_msg.edit_text(
                        f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
                        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {((i + 1) / total_users * 100):.1f}%"
                    )
                except:
                    pass  # Ignore edit errors
            
            # Small delay to avoid rate limits
            await asyncio.sleep(0.05)
            
        except Exception as e:
            error_count += 1
            logger.warning(f"Broadcast error for user {user_id}: {e}")
            
            # Longer delay on errors
            await asyncio.sleep(0.1)
    
    # Final results
    await progress_msg.edit_text(
        f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {error_count}\n"
        f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(success_count / max(total_users, 1) * 100):.1f}%",
        reply_markup=get_back_to_admin_keyboard()
    )
    
    # Log admin action
    admin_log = AdminLog(
        admin_id=callback.from_user.id,
        action="broadcast_message",
        description=f"Broadcast sent to {success_count}/{total_users} users"
    )
    await db.log_admin_action(admin_log)
    
    logger.info(f"Broadcast completed: {success_count}/{total_users} users")
    await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

@router.callback_query(F.data == "admin_check_payment")
async def admin_check_payment(callback: CallbackQuery, state: FSMContext):
    """Check payment status manually"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await callback.message.edit_text(
        "üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞ –Æ–ö–∞—Å—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤:\n\n"
        "üí° ID –ø–ª–∞—Ç–µ–∂–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ª–æ–≥–∞—Ö –±–æ—Ç–∞ –∏–ª–∏ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Æ–ö–∞—Å—Å—ã",
        reply_markup=get_back_to_admin_keyboard()
    )
    await state.set_state(AdminStates.waiting_payment_id)
    await callback.answer()

@router.message(AdminStates.waiting_payment_id)
async def process_payment_check(message: Message, state: FSMContext):
    """Process payment ID and check status"""
    if not await is_admin(message.from_user.id):
        return
    
    payment_id = message.text.strip()
    
    if not payment_id:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞")
        return
    
    # Show progress message
    progress_msg = await message.reply("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
    
    try:
        from api_integrations.payment_api import PaymentAPI
        
        payment_api = PaymentAPI()
        result = await payment_api.verify_yookassa_payment(payment_id)
        
        if result.get("status") == "error":
            await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {result.get('message')}")
            await state.clear()
            return
        
        status = result.get("status")
        amount = result.get("amount")
        currency = result.get("currency")
        metadata = result.get("metadata", {})
        is_paid = result.get("paid", False)
        
        user_id = metadata.get("user_id")
        package_id = metadata.get("package_id")
        
        status_text = f"""
üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>

üí≥ <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> {payment_id}
üí∞ <b>–°—É–º–º–∞:</b> {amount} {currency}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}
‚úÖ <b>–û–ø–ª–∞—á–µ–Ω:</b> {'–î–∞ ‚úÖ' if is_paid else '–ù–µ—Ç ‚ùå'}

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üì¶ <b>–ü–∞–∫–µ—Ç:</b> {package_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}
        """
        
        if is_paid and user_id and package_id:
            # Check if credits were already processed
            payment_exists = await db.payment_exists(payment_id)
            
            if payment_exists:
                status_text += "\n\n‚ö†Ô∏è –ö—Ä–µ–¥–∏—Ç—ã —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ"
            else:
                # Process payment manually
                await progress_msg.edit_text("üí∞ –ù–∞—á–∏—Å–ª—è—é –∫—Ä–µ–¥–∏—Ç—ã...")
                
                success = await payment_api._process_successful_card_payment(
                    user_id=int(user_id),
                    package_id=package_id,
                    payment_id=payment_id,
                    amount=float(amount)
                )
                
                if success:
                    status_text += "\n\n‚úÖ –ö—Ä–µ–¥–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã!"
                    
                    # Log admin action
                    admin_log = AdminLog(
                        admin_id=message.from_user.id,
                        action="manual_payment_processing",
                        target_user_id=int(user_id),
                        description=f"Manually processed payment {payment_id}"
                    )
                    await db.log_admin_action(admin_log)
                else:
                    status_text += "\n\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤"
        elif is_paid:
            status_text += "\n\n‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –Ω–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ"
        
        await progress_msg.edit_text(status_text)
        
    except Exception as e:
        logger.error(f"Error checking payment {payment_id}: {e}")
        await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
    
    await state.clear()

@router.callback_query(F.data == "admin_menu")
async def back_to_admin_menu(callback: CallbackQuery, state: FSMContext):
    """Back to admin menu"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await state.clear()
    
    admin_text = """
üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    """
    
    await callback.message.edit_text(
        admin_text,
        reply_markup=get_admin_menu_keyboard()
    )
    await callback.answer()

# ======= –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–†–ï–î–ò–¢–ê–ú–ò =======

@router.callback_query(F.data == "admin_check_credits")
async def admin_check_credits_start(callback: CallbackQuery, state: FSMContext):
    """Start checking user credits"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    text = """
üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Telegram ID), —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤:

<i>–ü—Ä–∏–º–µ—Ä: 123456789</i>
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_admin_keyboard()
    )
    await state.set_state(AdminStates.waiting_user_id_for_credits)
    await state.update_data(action="check")
    await callback.answer()

@router.callback_query(F.data == "admin_grant_credits")
async def admin_grant_credits_start(callback: CallbackQuery, state: FSMContext):
    """Start granting credits to user"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º environment
    from admin_tools.credit_management import credit_manager
    
    if not credit_manager.is_production:
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–í—ã–¥–∞—á–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞</b>\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ production (–ø–æ—Å–ª–µ deploy).\n"
            "–õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
            reply_markup=get_back_to_admin_keyboard()
        )
        await callback.answer()
        return
    
    text = """
üíé <b>–í—ã–¥–∞—á–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –í—ã–¥–∞—á–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ production!

–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Telegram ID):

<i>–ü—Ä–∏–º–µ—Ä: 123456789</i>
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_admin_keyboard()
    )
    await state.set_state(AdminStates.waiting_user_id_for_credits)
    await state.update_data(action="grant")
    await callback.answer()

@router.message(AdminStates.waiting_user_id_for_credits)
async def admin_process_user_id_for_action(message: Message, state: FSMContext):
    """Process user ID for credit actions"""
    if not await is_admin(message.from_user.id):
        return
    
    try:
        data = await state.get_data()
        action = data.get('action', 'check')
        user_id = int(message.text.strip())
        
        if action == "check":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            result = await check_user_credits(message.from_user.id, user_id)
            
            if "error" in result:
                await message.answer(f"‚ùå {result['error']}")
            else:
                credits_text = f"""
üí∞ <b>–ë–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

üë§ <b>User ID:</b> {result['user_id']}
üë§ <b>Username:</b> @{result['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üë§ <b>–ò–º—è:</b> {result['first_name'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üíé <b>–ö—Ä–µ–¥–∏—Ç—ã:</b> {result['credits']}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {result['status']}
üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {result['created_at'][:10] if result['created_at'] else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üïê <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> {result['updated_at'][:10] if result['updated_at'] else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                """
                
                await message.answer(
                    credits_text,
                    reply_markup=get_back_to_admin_keyboard()
                )
            await state.clear()
            
        elif action == "grant":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
            await state.update_data(user_id=user_id)
            
            await message.answer(
                f"üíé <b>–í—ã–¥–∞—á–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}</b>\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ (1-1000):\n\n"
                f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 50</i>",
                reply_markup=get_back_to_admin_keyboard()
            )
            await state.set_state(AdminStates.waiting_credits_amount)
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
    except Exception as e:
        logger.error(f"Error processing user ID for action: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@router.message(AdminStates.waiting_credits_amount)
async def admin_process_credits_amount(message: Message, state: FSMContext):
    """Process credits amount input"""
    if not await is_admin(message.from_user.id):
        return
    
    try:
        credits = int(message.text.strip())
        
        if credits <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
            
        if credits > 1000:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ —Ä–∞–∑: 1000")
            return
        
        await state.update_data(credits=credits)
        
        await message.answer(
            f"üíé <b>–í—ã–¥–∞—á–∞ {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤—ã–¥–∞—á–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É</i>\n\n"
            f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
            reply_markup=get_back_to_admin_keyboard()
        )
        await state.set_state(AdminStates.waiting_credits_reason)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤.")
    except Exception as e:
        logger.error(f"Error processing credits amount: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤.")

@router.message(AdminStates.waiting_credits_reason)
async def admin_process_credits_reason(message: Message, state: FSMContext):
    """Process credits reason and complete grant"""
    if not await is_admin(message.from_user.id):
        return
    
    try:
        data = await state.get_data()
        user_id = data.get('user_id')
        credits = data.get('credits')
        reason = message.text.strip() if message.text.strip() != '-' else ""
        
        # –í—ã–¥–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        result = await grant_user_credits(message.from_user.id, user_id, credits, reason, message.bot)
        
        if result.get("success"):
            notification_status = "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if result.get("notification_sent") else "‚ö†Ô∏è –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            
            success_text = f"""
‚úÖ <b>–ö–†–ï–î–ò–¢–´ –£–°–ü–ï–®–ù–û –í–´–î–ê–ù–´!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {result['user_id']}
üíé <b>–í—ã–¥–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:</b> {result['credits_granted']}
üí∞ <b>–°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å:</b> {result['old_balance']}
üí∞ <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {result['new_balance']}
üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {result['reason'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üïê <b>–í—Ä–µ–º—è:</b> {result['timestamp'][:19]}
üì® <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:</b> {notification_status}

–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ª–æ–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
            """
            await message.answer(
                success_text,
                reply_markup=get_back_to_admin_keyboard()
            )
        else:
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫—Ä–µ–¥–∏—Ç–æ–≤:</b>\n\n{result.get('error')}",
                reply_markup=get_back_to_admin_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in credit grant completion: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã–¥–∞—á–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤.",
            reply_markup=get_back_to_admin_keyboard()
        )
    
    await state.clear()
