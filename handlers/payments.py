from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, PreCheckoutQuery, SuccessfulPayment
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.database import db
from database.models import Transaction, TransactionType, PaymentMethod
from keyboards.inline import get_payment_menu_keyboard, get_back_to_menu_keyboard, get_credit_packages_keyboard
from api_integrations.payment_api import PaymentAPI
from config import Config
from utils.logger import get_logger

logger = get_logger(__name__)
router = Router()
config = Config()

class PaymentStates(StatesGroup):
    waiting_custom_amount = State()

# Credit packages - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
CREDIT_PACKAGES = {
    "package_1": {"credits": 10, "price_stars": 79, "price_rub": 79, "title": "1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ (10 –∫—Ä–µ–¥–∏—Ç–æ–≤)"},
    "package_5": {"credits": 50, "price_stars": 399, "price_rub": 399, "title": "5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤–∏–¥–µ–æ (50 –∫—Ä–µ–¥–∏—Ç–æ–≤)"},
    "package_10": {"credits": 100, "price_stars": 749, "price_rub": 749, "title": "10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤–∏–¥–µ–æ (100 –∫—Ä–µ–¥–∏—Ç–æ–≤)", "popular": True},
    "package_50": {"credits": 500, "price_stars": 3499, "price_rub": 3499, "title": "50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤–∏–¥–µ–æ (500 –∫—Ä–µ–¥–∏—Ç–æ–≤)", "bonus": 50},
}

@router.callback_query(F.data == "buy_credits")
async def buy_credits_menu(callback: CallbackQuery):
    """Show credits purchase menu"""
    user = await db.get_user(callback.from_user.id)
    credits = user.credits if user else 0
    
    text = f"""
üí∞ <b>–ü–æ–∫—É–ø–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤</b>

üí≥ <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:

‚≠êÔ∏è <b>Telegram Stars</b> - –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ
üí≥ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞/–°–ë–ü</b> - —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å–∞

üí° <b>1 –∫—Ä–µ–¥–∏—Ç –æ—Ç 7‚ÇΩ</b> (–≤ –±–æ–ª—å—à–æ–º –ø–∞–∫–µ—Ç–µ)
üé¨ <b>1 –≤–∏–¥–µ–æ = 10 –∫—Ä–µ–¥–∏—Ç–æ–≤ (–æ—Ç 70‚ÇΩ)</b>
    """
    
    if callback.message:
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_payment_menu_keyboard()
        )
    await callback.answer()

@router.callback_query(F.data == "pay_stars")
async def pay_with_stars(callback: CallbackQuery):
    """Show Telegram Stars payment options"""
    text = """
‚≠êÔ∏è <b>–û–ø–ª–∞—Ç–∞ Telegram Stars</b>

üé¨ <b>1 –≤–∏–¥–µ–æ = 10 –∫—Ä–µ–¥–∏—Ç–æ–≤</b>
üí∞ <b>–í—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã:</b>
‚Ä¢ 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - 79‚≠êÔ∏è (7.9‚≠êÔ∏è –∑–∞ –∫—Ä–µ–¥–∏—Ç)
‚Ä¢ 5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - 399‚≠êÔ∏è (7.98‚≠êÔ∏è –∑–∞ –∫—Ä–µ–¥–∏—Ç) üî•
‚Ä¢ 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - 749‚≠êÔ∏è (7.49‚≠êÔ∏è –∑–∞ –∫—Ä–µ–¥–∏—Ç) 
‚Ä¢ 50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - 3499‚≠êÔ∏è (7‚≠êÔ∏è –∑–∞ –∫—Ä–µ–¥–∏—Ç) + üéÅ –±–æ–Ω—É—Å!

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤:
    """
    
    if callback.message:
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_credit_packages_keyboard("stars")
        )
    await callback.answer()

@router.callback_query(F.data == "pay_card")
async def pay_with_card(callback: CallbackQuery):
    """Show card payment options"""
    text = """
üí≥ <b>–û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π</b>

üé¨ <b>1 –≤–∏–¥–µ–æ = 10 –∫—Ä–µ–¥–∏—Ç–æ–≤</b>
üí∞ <b>–í—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã:</b>
‚Ä¢ 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - 79‚ÇΩ (7.9‚ÇΩ –∑–∞ –∫—Ä–µ–¥–∏—Ç)
‚Ä¢ 5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - 399‚ÇΩ (7.98‚ÇΩ –∑–∞ –∫—Ä–µ–¥–∏—Ç) üî• 
‚Ä¢ 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - 749‚ÇΩ (7.49‚ÇΩ –∑–∞ –∫—Ä–µ–¥–∏—Ç)
‚Ä¢ 50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - 3499‚ÇΩ (7‚ÇΩ –∑–∞ –∫—Ä–µ–¥–∏—Ç) + üéÅ –±–æ–Ω—É—Å!

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤:
    """
    
    if callback.message:
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_credit_packages_keyboard("card")
        )
    await callback.answer()

@router.callback_query(F.data == "pay_sbp")
async def pay_with_sbp(callback: CallbackQuery):
    """Show SBP payment options"""
    text = """
üè¶ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü</b>

<b>–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π</b> - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã 24/7

üé¨ <b>1 –≤–∏–¥–µ–æ = 10 –∫—Ä–µ–¥–∏—Ç–æ–≤</b>
üí∞ <b>–í—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã:</b>
‚Ä¢ 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - 79‚ÇΩ (7.9‚ÇΩ –∑–∞ –∫—Ä–µ–¥–∏—Ç)
‚Ä¢ 5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - 399‚ÇΩ (7.98‚ÇΩ –∑–∞ –∫—Ä–µ–¥–∏—Ç) üî•
‚Ä¢ 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - 749‚ÇΩ (7.49‚ÇΩ –∑–∞ –∫—Ä–µ–¥–∏—Ç)
‚Ä¢ 50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - 3499‚ÇΩ (7‚ÇΩ –∑–∞ –∫—Ä–µ–¥–∏—Ç) + üéÅ –±–æ–Ω—É—Å!

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤:
    """
    
    if callback.message:
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_credit_packages_keyboard("sbp")
        )
    await callback.answer()

@router.callback_query(F.data.startswith("buy_stars_"))
async def process_stars_payment(callback: CallbackQuery):
    """Process Telegram Stars payment"""
    package_id = callback.data.replace("buy_stars_", "")
    package = CREDIT_PACKAGES.get(package_id)
    
    if not package:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞–∫–µ—Ç")
        return
    
    # Create invoice for Telegram Stars
    title = f"üí∞ {package['title']}"
    description = f"–ü–æ–∫—É–ø–∫–∞ {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –≤–∏–¥–µ–æ"
    
    if package.get('bonus'):
        description += f" + {package['bonus']} –±–æ–Ω—É—Å–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤!"
    
    prices = [{"label": "XTR", "amount": package['price_stars']}]
    
    try:
        if callback.message:
            await callback.message.answer_invoice(
                title=title,
                description=description,
                payload=f"credits_{package_id}_{callback.from_user.id}",
                provider_token="",  # Empty for Telegram Stars
                currency="XTR",
                prices=[{"label": "XTR", "amount": package['price_stars']}]
            )
        await callback.answer("‚úÖ –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω!")
    except Exception as e:
        logger.error(f"Error creating Stars invoice: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞")

@router.callback_query(F.data.startswith("buy_card_"))
async def process_card_payment(callback: CallbackQuery):
    """Process card/SBP payment through YooKassa"""
    package_id = callback.data.replace("buy_card_", "")
    package = CREDIT_PACKAGES.get(package_id)
    
    if not package:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞–∫–µ—Ç")
        return
    
    # Create payment through YooKassa
    payment_api = PaymentAPI()
    
    description = f"–ü–æ–∫—É–ø–∫–∞ {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤"
    if package.get('bonus'):
        description += f" + {package['bonus']} –±–æ–Ω—É—Å–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤"
    
    payment_url = await payment_api.create_yookassa_payment(
        amount=package['price_rub'],
        description=description,
        user_id=callback.from_user.id,
        package_id=package_id,
        payment_method="bank_card"
    )
    
    if payment_url:
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_credits")]
        ])
        
        await callback.message.edit_text(
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π</b>\n\n"
            f"üì¶ <b>–ü–∞–∫–µ—Ç:</b> {package['title']}\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {package['price_rub']} ‚ÇΩ\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_menu_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("buy_sbp_"))
async def process_sbp_payment(callback: CallbackQuery):
    """Process SBP payment through YooKassa"""
    package_id = callback.data.replace("buy_sbp_", "")
    package = CREDIT_PACKAGES.get(package_id)
    
    if not package:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞–∫–µ—Ç")
        return
    
    # Create payment through YooKassa with SBP method
    payment_api = PaymentAPI()
    
    description = f"–ü–æ–∫—É–ø–∫–∞ {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤"
    if package.get('bonus'):
        description += f" + {package['bonus']} –±–æ–Ω—É—Å–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤"
    
    payment_url = await payment_api.create_yookassa_payment(
        amount=package['price_rub'],
        description=description,
        user_id=callback.from_user.id,
        package_id=package_id,
        payment_method="sbp"
    )
    
    if payment_url:
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè¶ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –°–ë–ü", url=payment_url)],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_credits")]
        ])
        
        await callback.message.edit_text(
            f"üè¶ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü</b>\n\n"
            f"üì¶ <b>–ü–∞–∫–µ—Ç:</b> {package['title']}\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {package['price_rub']} ‚ÇΩ\n\n"
            f"<b>–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π</b> - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã 24/7\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_menu_keyboard()
        )
    
    await callback.answer()

@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    """Process pre-checkout query for Telegram Stars"""
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    """Process successful Telegram Stars payment with enhanced validation"""
    payment = message.successful_payment
    
    # SECURITY: Validate that payment is from the actual user who initiated it
    actual_user_id = message.from_user.id
    
    # Parse and validate payload format
    try:
        payload_parts = payment.invoice_payload.split('_')
        if len(payload_parts) < 3 or payload_parts[0] != "credits":
            logger.error(f"Invalid payment payload format: {payment.invoice_payload}")
            return
        
        package_id = payload_parts[1]
        claimed_user_id = int(payload_parts[2])
        
        # SECURITY: Ensure user_id in payload matches actual payment sender
        if claimed_user_id != actual_user_id:
            logger.error(f"Payment fraud attempt: payload claims user {claimed_user_id} but payment from {actual_user_id}")
            return
        
    except (ValueError, IndexError) as e:
        logger.error(f"Error parsing payment payload: {e}")
        return
    
    user_id = actual_user_id  # Use verified user ID
    
    # Validate package exists and payment amount matches
    package = CREDIT_PACKAGES.get(package_id)
    if not package:
        logger.error(f"Invalid package_id in payment: {package_id}")
        return
    
    # SECURITY: Verify payment amount matches expected package price
    expected_amount = package['price_stars']
    actual_amount = payment.total_amount
    
    if actual_amount != expected_amount:
        logger.error(f"Payment amount mismatch: expected {expected_amount} XTR, got {actual_amount} XTR")
        return
    
    # Check for duplicate payment processing
    payment_id = payment.telegram_payment_charge_id
    if await db.payment_exists(payment_id):
        logger.warning(f"Duplicate Telegram Stars payment detected: {payment_id}")
        return
    
    # Process the validated payment
    # Calculate total credits (including bonus)
    total_credits = package['credits']
    if package.get('bonus'):
        total_credits += package['bonus']
    
    # Update user credits
    user = await db.get_user(user_id)
    if user:
        new_credits = user.credits + total_credits
        await db.update_user_credits(user_id, new_credits)
        
        # Create transaction record
        transaction = Transaction(
            user_id=user_id,
            type=TransactionType.CREDIT_PURCHASE,
            amount=total_credits,
            description=f"Purchase via Telegram Stars: {package['title']}",
            payment_method=PaymentMethod.TELEGRAM_STARS,
            payment_id=payment.telegram_payment_charge_id
        )
        await db.create_transaction(transaction)
        
        success_text = f"""
‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

üí∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:</b> {total_credits}
üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {new_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ! üé¨
        """
        
        from keyboards.inline import get_main_menu_keyboard
        await message.answer(
            success_text,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
        
        logger.info(f"Stars payment completed: user {user_id}, credits {total_credits}")
    else:
        logger.error(f"User {user_id} not found for payment processing")

# Webhook handler for YooKassa payments would be implemented here
# This requires a separate web server endpoint
